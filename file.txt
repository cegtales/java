removes all the occurrences of a specified string

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
public class string_remove {
public static void main(String[] args) {
// File path
String filePath = "input.txt";
// String to be removed
String stringToRemove = "bala";
try {
// Read the content from the file
BufferedReader reader = new BufferedReader(new FileReader(filePath));
StringBuilder content = new StringBuilder();
String line;
while ((line = reader.readLine()) != null) {
content.append(line).append("\n");
}
reader.close();
// Replace the specified string with an empty string
String updatedContent = content.toString().replaceAll(stringToRemove, "");
// Write the updated content back to the file
BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
writer.write(updatedContent);
writer.close();
System.out.println("String \"" + stringToRemove + "\" removed from the file
successfully.");
} catch (IOException e) {
System.out.println("Error reading/writing file: " + e.getMessage());
}
}
}



count the number of characters, words, and lines

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
public class count {
public static void main(String[] args) {
String fileName = "input.txt"; // Change this to your file name
int charCount = 0;
int wordCount = 0;
int lineCount = 0;
try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
String line;
while ((line = br.readLine()) != null) {
lineCount++;
charCount += line.length();
String[] words = line.trim().split("\\s+");
wordCount += words.length;
}
} catch (IOException e) {
System.err.println("Error reading the file: " + e.getMessage());
}
System.out.println("Number of characters: " + charCount);
System.out.println("Number of words: " + wordCount);
System.out.println("Number of lines: " + lineCount);
}
}



text file contains an unspecified number of scores separated by blanks. Write a program that prompts the user to enter the file, reads the scores from the file, and displays their total and average.


import java.io.*;
import java.util.*;
public class score {
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
System.out.print("Enter the file name: ");
String fileName = scanner.nextLine();
scanner.close();
File file = new File(fileName);
try {
Scanner fileScanner = new Scanner(file);
int total = 0;
int count = 0;
while (fileScanner.hasNext()) {
if (fileScanner.hasNextInt()) {
int score = fileScanner.nextInt();
total += score;
count++;
} else {
fileScanner.next(); // Move scanner to the next token
}
}
fileScanner.close();
if (count > 0) {
double average = (double) total / count;
System.out.println("Total: " + total);
System.out.println("Average: " + average);
} else {
System.out.println("No valid scores found in the file.");
}
} catch (FileNotFoundException e) {
System.out.println("File not found: " + fileName);
}
}
}





import java.io.*;
import java.util.*;
public class Exercise12_15 {
public static void main(String[] args) {
File file = new File("Exercise12_15.txt");
// Create the file if it doesn't exist
try {
if (!file.exists()) {
file.createNewFile();
}
} catch (IOException e) {
System.out.println("An error occurred while creating the file.");
e.printStackTrace();
}
// Write 100 random integers to the file
try (PrintWriter writer = new PrintWriter(new FileWriter(file))) {
Random rand = new Random();
for (int i = 0; i < 100; i++) {
writer.print(rand.nextInt(1000) + " ");
}
System.out.println("Data has been written to the file.");
} catch (IOException e) {
System.out.println("An error occurred while writing to the file.");
e.printStackTrace();
}
// Read data back from the file and display in increasing order
try (Scanner scanner = new Scanner(file)) {
List<Integer> numbers = new ArrayList<>();
while (scanner.hasNext()) {
numbers.add(scanner.nextInt());
}
Collections.sort(numbers);
System.out.println("Data read from file and sorted in increasing order:");
for (int num : numbers) {
System.out.print(num + " ");
}
} catch (FileNotFoundException e) {
System.out.println("File not found.");
e.printStackTrace();
}
}
}
